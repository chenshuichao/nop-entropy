<lib x:schema="/nop/schema/xlib.xdef"
     xmlns:x="/nop/schema/xdsl.xdef" xmlns:i18n-en="i18n-en" xmlns:thisLib="thisLib" xmlns:c="c" xmlns:xpl="xpl"
     xmlns:feature="feature">

    <tags>
        <!--
        在_app.orm.xml的<x:post-extends>段中会调用这个标签函数，从而为实体增加相应扩展支持
        -->
        <DefaultPostExtends outputMode="xml">
            <attr name="_dsl_root" implicit="true"/>
            <source>
                <thisLib:ForceDynamicEntitySupport/>
                <thisLib:DelTagSupport/>
                <thisLib:JsonComponentSupport/>
                <thisLib:XmlComponentSupport/>
                <thisLib:ExtFieldsSupport/>
                <thisLib:FileComponentSupport/>
                <thisLib:TenantSupport feature:on="nop.orm.enable-tenant-by-default"/>
            </source>
        </DefaultPostExtends>

        <DefaultGenExtends outputMode="xml">
            <attr name="_dsl_root" implicit="true" />
            <source>
                <thisLib:MonitorFieldsSupport xpl:if="_dsl_root.containsTag('monitor-fields')"/>
            </source>
        </DefaultGenExtends>

        <MonitorFieldsSupport outputMode="xml">
            <attr name="_dsl_root" implicit="true" />
            <source>
              <orm>
                <entities>
                  <c:for var="entityNode" items="${_dsl_root.childByTag('entities').children}">
                    <entity name="${entityNode.getAttr('name')}" xpl:if="!entityNode.containsTag('no-monitor-fields')">
                        <column code="VERSION" displayName="数据版本" domain="version" mandatory="true" name="version"
                                propId="-1"
                                stdDataType="long" stdSqlType="BIGINT" i18n-en:displayName="Version"/>
                        <column code="CREATED_BY" displayName="创建人" domain="createdBy" mandatory="true"
                                name="createdBy"
                                precision="50" propId="-1" stdDataType="string" stdSqlType="VARCHAR"
                                i18n-en:displayName="Created By"/>
                        <column code="CREATE_TIME" displayName="创建时间" domain="createTime" mandatory="true"
                                name="createTime"
                                propId="-1" stdDataType="timestamp" stdSqlType="TIMESTAMP"
                                i18n-en:displayName="Create Time"/>
                        <column code="UPDATED_BY" displayName="修改人" domain="updatedBy" mandatory="true"
                                name="updatedBy"
                                precision="50" propId="-1" stdDataType="string" stdSqlType="VARCHAR"
                                i18n-en:displayName="Updated By"/>
                        <column code="UPDATE_TIME" displayName="修改时间" domain="updateTime" mandatory="true"
                                name="updateTime"
                                propId="-1" stdDataType="timestamp" stdSqlType="TIMESTAMP"
                                i18n-en:displayName="Update Time"/>
                    </entity>
                  </c:for>
                </entities>
              </orm>
            </source>
        </MonitorFieldsSupport>

        <ForceDynamicEntitySupport outputMode="none">
            <attr name="_dsl_root" implicit="true"/>
            <source><![CDATA[
               if(_dsl_root.attrBoolean('orm:forceDynamicEntity')){
                  _dsl_root.childByTag('entities').forEachChild(entityNode=>{
                     if(entityNode.attrCsvSet('tagSet')?.contains('kv-table')){
                        entityNode.setAttr('className', 'io.nop.orm.support.DynamicOrmKeyValueTable');
                     }else{
                        entityNode.setAttr('className','io.nop.orm.support.DynamicOrmEntity');
                     }
                  });
               }
            ]]></source>
        </ForceDynamicEntitySupport>

        <ForceUseIdSupport outputMode="none">
            <attr name="_dsl_root" implicit="true"/>
            <source>
                <c:script><![CDATA[
                    _dsl_root.childByTag('entities').forEachChild(entityNode=>{
                      const idCol = entityNode.childByTag('columns').childByAttr('name','id_');
                      if(idCol != null)
                         idCol.setAttr('name','id');
                      entityNode.childByTag('relations')?.forEachChild(relNode=>{
                        relNode.childByTag('join')?.forEachChild(joinNode=>{
                           if(joinNode.getAttr('leftProp') == 'id_'){
                              joinNode.setAttr('leftProp','id');
                           }else if(joinNode.getAttr('rightProp') == 'id_'){
                              joinNode.setAttr('rightProp','id');
                           }
                        });
                      });
                    });
                ]]></c:script>
            </source>
        </ForceUseIdSupport>

        <DelTagSupport>
            <attr name="_dsl_root" implicit="true"/>
            <source>
                <c:script><![CDATA[
                    _dsl_root.childByTag('entities')?.children?.forEach(entity=>{
                      entity.childByTag('columns')?.children?.forEach(col=>{
                         if(col.attrCsvSet('tagSet')?.contains('del')){
                            col.removeAttr('propId');
                            col.setAttr('x:override','remove');
                            col.setAttr('notGenCode',true);
                         }
                      });
                    });
                ]]></c:script>
            </source>
        </DelTagSupport>

        <JsonComponentSupport outputMode="node">
            <!--
             _dsl_root为元编程阶段可访问的配置文件根节点
            -->
            <attr name="_dsl_root" implicit="true"/>

            <source>
                <orm>
                    <entities>
                        <c:for var="entityNode" items="${_dsl_root.childByTag('entities').children}">
                            <c:script><![CDATA[
                                if(entityNode.attrBoolean('x:abstract'))
                                    continue;
                                if(entityNode.attrText('x:override') == 'remove')
                                    continue;
                                let jsonCols = entityNode.childByTag('columns').children.filter(colNode=>{
                                      return colNode.attrCsvSet('tagSet')?.contains('json') || colNode.getAttr('stdDomain') == 'json';
                                   });
                            ]]></c:script>
                            <!--
                            标记了是json字段，则追加component定义。
                            -->
                            <entity name="${entityNode.getAttr('name')}" xpl:if="!jsonCols.empty">
                                <components>
                                    <c:for var="colNode" items="${jsonCols}">
                                        <c:script>
                                            const pub =
                                            !colNode.attrCsvSet('tagSet')?.contains('not-pub')
                                        </c:script>
                                        <component name="${colNode.getAttr('name')}Component" needFlush="true"
                                                   notGenCode="${colNode.getAttr('notGenCode')}"
                                                   tagSet="json${pub and ',pub,edit'}"
                                                   className="io.nop.orm.component.JsonOrmComponent">
                                            <prop name="_jsonText" column="${colNode.getAttr('name')}"/>
                                        </component>
                                    </c:for>
                                </components>
                            </entity>
                        </c:for>
                    </entities>
                </orm>
            </source>
        </JsonComponentSupport>

        <XmlComponentSupport outputMode="node">
            <!--
             _dsl_root为元编程阶段可访问的配置文件根节点
            -->
            <attr name="_dsl_root" implicit="true"/>

            <source>
                <orm>
                    <entities>
                        <c:for var="entityNode" items="${_dsl_root.childByTag('entities').children}">
                            <c:script><![CDATA[
                                if(entityNode.attrBoolean('x:abstract'))
                                    continue;
                                if(entityNode.attrText('x:override') == 'remove')
                                    continue;
                                let xmlCols = entityNode.childByTag('columns').children.filter(colNode=>{
                                      return colNode.attrCsvSet('tagSet')?.contains('xml') || colNode.getAttr('stdDomain') == 'xml';
                                   });
                            ]]></c:script>
                            <!--
                            标记了是json字段，则追加component定义。
                            -->
                            <entity name="${entityNode.getAttr('name')}" xpl:if="!xmlCols.empty">
                                <components>
                                    <c:for var="colNode" items="${xmlCols}">
                                        <c:script>
                                            const pub =
                                            !colNode.attrCsvSet('tagSet')?.contains('not-pub')
                                        </c:script>
                                        <component name="${colNode.getAttr('name')}XmlComponent" needFlush="true"
                                                   notGenCode="${colNode.getAttr('notGenCode')}"
                                                   tagSet="xml${pub and ',pub,edit'}"
                                                   className="io.nop.orm.component.XmlOrmComponent">
                                            <prop name="xmlText" column="${colNode.getAttr('name')}"/>
                                        </component>
                                    </c:for>
                                </components>
                            </entity>
                        </c:for>
                    </entities>
                </orm>
            </source>
        </XmlComponentSupport>

        <!--
        识别use-ext-field配置，自动生成扩展字段所需要的关联属性配置
        -->
        <ExtFieldsSupport outputMode="node">
            <!--
             _dsl_root为元编程阶段可访问的配置文件根节点
            -->
            <attr name="_dsl_root" implicit="true"/>

            <source>
                <c:script><![CDATA[
                    let entityNodes = _dsl_root.childByTag('entities').children
                        .filter(child=> child.attrCsvSet('tagSet')?.contains('use-ext-field'));
                    let useSysExtFields = false;
                ]]></c:script>

                <orm xpl:if="!entityNodes.empty">
                    <entities>
                        <c:for var="entityNode" items="${entityNodes}">
                            <c:choose>
                                <when test="${entityNode.attrCsvSet('tagSet').contains('local-ext')}">
                                    <thisLib:GenLocalExtFieldSupport
                                            entityNode="${entityNode}"
                                            genExtTable="${_dsl_root.childByTag('entities')
                                                .childByAttr('name',entityNode.getAttr('name')+'Ext') == null}"/>
                                </when>
                                <otherwise>
                                    <c:script>useSysExtFields = true;</c:script>
                                    <entity name="${entityNode.getAttr('name')}">
                                        <relations>
                                            <to-many name="extFields"
                                                     refEntityName="io.nop.sys.dao.entity.NopSysExtField"
                                                     keyProp="fieldName">
                                                <join>
                                                    <on leftProp="id" rightProp="entityId"/>
                                                    <on leftValue="${entityNode.getAttr('name')}"
                                                        rightProp="entityName"/>
                                                </join>
                                            </to-many>
                                        </relations>
                                    </entity>
                                </otherwise>
                            </c:choose>
                        </c:for>
                        <c:if test="${useSysExtFields and !_dsl_root.childByTag('entities').childByAttr('name','io.nop.sys.dao.entity.NopSysExtField')}">
                            <!-- 引入外部表定义 -->
                            <entity
                                    displayName="扩展字段" name="io.nop.sys.dao.entity.NopSysExtField"
                                    registerShortName="true" notGenCode="true"
                                    tableName="nop_sys_ext_field" i18n-en:displayName="Extension Field">
                                <columns>
                                    <column code="ENTITY_NAME" displayName="实体名" mandatory="true" name="entityName"
                                            precision="200"
                                            primary="true" propId="1" stdDataType="string" stdSqlType="VARCHAR"
                                            i18n-en:displayName="Entity Name"/>
                                    <column code="ENTITY_ID" displayName="实体ID" mandatory="true" name="entityId"
                                            precision="100"
                                            primary="true" propId="2" stdDataType="string" stdSqlType="VARCHAR"
                                            i18n-en:displayName="Entity ID"/>
                                    <column code="FIELD_NAME" displayName="字段名" mandatory="true" name="fieldName"
                                            precision="100"
                                            primary="true" propId="3" stdDataType="string" stdSqlType="VARCHAR"
                                            i18n-en:displayName="Field Name"/>
                                </columns>
                            </entity>
                        </c:if>
                    </entities>
                </orm>
            </source>
        </ExtFieldsSupport>

        <GenLocalExtFieldSupport outputMode="node">
            <attr name="entityNode"/>
            <attr name="genExtTable">
                <description>是否自动生成扩展表定义</description>
            </attr>

            <source>
                <entity name="${entityNode.getAttr('name')}">
                    <relations>
                        <to-many name="extFields" refEntityName="${entityNode.getAttr('name')}Ext" keyProp="fieldName">
                            <join>
                                <on leftProp="id" rightProp="entityId"/>
                            </join>
                        </to-many>
                    </relations>
                </entity>

                <!-- 自动生成一个扩展表配置 -->
                <entity name="${entityNode.getAttr('name')}Ext" tableName="${entityNode.getAttr('tableName')}_ext"
                        className="io.nop.orm.support.DynamicOrmKeyValueTable" versionProp="version"
                        createTimeProp="createTime" createrProp="createdBy" tagSet="kv-table"
                        updateTimeProp="updateTime" updaterProp="updatedBy" notGenCode="true"
                        displayName="扩展属性" i18n-en:displayName="Extension Fields" xpl:if="genExtTable"
                >
                    <columns>
                        <column code="ENTITY_ID" displayName="实体ID" mandatory="true" name="entityId" precision="100"
                                primary="true" propId="2" stdDataType="string" stdSqlType="VARCHAR"
                                i18n-en:displayName="Entity ID"/>
                        <column code="FIELD_NAME" displayName="字段名" mandatory="true" name="fieldName" precision="100"
                                primary="true" propId="3" stdDataType="string" stdSqlType="VARCHAR"
                                i18n-en:displayName="Field Name"/>
                        <column code="FIELD_TYPE" displayName="字段类型" mandatory="true" name="fieldType" propId="4"
                                stdDataType="int" stdSqlType="INTEGER" i18n-en:displayName="Field Type"/>
                        <column code="DECIMAL_SCALE" displayName="浮点精度" name="decimalScale" propId="5"
                                stdDataType="byte"
                                stdSqlType="TINYINT" i18n-en:displayName="Decimal Scale"/>
                        <column code="DECIMAL_VALUE" displayName="浮点值" name="decimalValue" precision="24" propId="6"
                                scale="8"
                                stdDataType="decimal" stdSqlType="DECIMAL" i18n-en:displayName="Decimal Value"/>
                        <column code="DATE_VALUE" displayName="日期值" name="dateValue" propId="7" stdDataType="date"
                                stdSqlType="DATE" i18n-en:displayName="Date Value"/>
                        <column code="TIMESTAMP_VALUE" displayName="时间点值" name="timestampValue" propId="8"
                                stdDataType="timestamp" stdSqlType="TIMESTAMP" i18n-en:displayName="Timestamp Value"/>
                        <column code="STRING_VALUE" displayName="字符串值" name="stringValue" precision="4000"
                                propId="9"
                                stdDataType="string" stdSqlType="VARCHAR" i18n-en:displayName="String Value"/>
                        <column code="VERSION" displayName="数据版本" domain="version" mandatory="true" name="version"
                                propId="10"
                                stdDataType="int" stdSqlType="INTEGER" i18n-en:displayName="Version"/>
                        <column code="CREATED_BY" displayName="创建人" domain="createdBy" mandatory="true"
                                name="createdBy"
                                precision="50" propId="11" stdDataType="string" stdSqlType="VARCHAR"
                                i18n-en:displayName="Created By"/>
                        <column code="CREATE_TIME" displayName="创建时间" domain="createTime" mandatory="true"
                                name="createTime"
                                propId="12" stdDataType="timestamp" stdSqlType="TIMESTAMP"
                                i18n-en:displayName="Create Time"/>
                        <column code="UPDATED_BY" displayName="修改人" domain="updatedBy" mandatory="true"
                                name="updatedBy"
                                precision="50" propId="13" stdDataType="string" stdSqlType="VARCHAR"
                                i18n-en:displayName="Updated By"/>
                        <column code="UPDATE_TIME" displayName="修改时间" domain="updateTime" mandatory="true"
                                name="updateTime"
                                propId="14" stdDataType="timestamp" stdSqlType="TIMESTAMP"
                                i18n-en:displayName="Update Time"/>
                        <column code="REMARK" displayName="备注" name="remark" precision="200" propId="15"
                                stdDataType="string"
                                stdSqlType="VARCHAR" i18n-en:displayName="Remark"/>
                    </columns>
                </entity>
            </source>
        </GenLocalExtFieldSupport>

        <FileComponentSupport outputMode="node">
            <!--
             _dsl_root为元编程阶段可访问的配置文件根节点
            -->
            <attr name="_dsl_root" implicit="true"/>

            <source>
                <orm>
                    <entities>
                        <c:for var="entityNode" items="${_dsl_root.childByTag('entities').children}">
                            <c:script><![CDATA[
                                if(entityNode.attrBoolean('x:abstract'))
                                    continue;
                                if(entityNode.attrText('x:override') == 'remove')
                                    continue;
                                let fileCols = entityNode.childByTag('columns').children.filter(colNode=>{
                                      return colNode.getAttr('stdDomain') == 'file' || colNode.getAttr('stdDomain') == 'file-list';
                                   });
                            ]]></c:script>
                            <!--
                            标记了是json字段，则追加component定义。
                            -->
                            <entity name="${entityNode.getAttr('name')}" xpl:if="!fileCols.empty">
                                <components>
                                    <c:for var="colNode" items="${fileCols}">
                                        <c:script>
                                            const pub =
                                            !colNode.attrCsvSet('tagSet')?.contains('not-pub')
                                        </c:script>
                                        <component name="${colNode.getAttr('name')}Component" needFlush="true"
                                                   notGenCode="${colNode.getAttr('notGenCode')}"
                                                   className="io.nop.orm.component.${colNode.getAttr('stdDomain') == 'file-list' ? 'OrmFileListComponent' : 'OrmFileComponent'}">
                                            <prop name="filePath" column="${colNode.getAttr('name')}"/>
                                        </component>
                                    </c:for>
                                </components>
                            </entity>
                        </c:for>
                    </entities>
                </orm>
            </source>
        </FileComponentSupport>

        <TenantSupport>
            <!--
               _dsl_root为元编程阶段可访问的配置文件根节点
            -->
            <attr name="_dsl_root" implicit="true"/>

            <description>
                明确标注了标注no-tenant标签的表不会启用tenant过滤，例如租户表和用户表缺省情况下标注了no-tenant。
            </description>

            <source>
                <c:script><![CDATA[
                for(let entityNode of _dsl_root.childByTag('entities').children){
                    if(xpl('thisLib:NotAutoTenant',entityNode))
                       continue;

                    // 如果没有明确指定是否启用tenant，则缺省启用
                    if(entityNode.getAttr('useTenant') == null){
                       entityNode.setAttr('useTenant',true);
                    }
                }
              ]]></c:script>
            </source>
        </TenantSupport>

        <NotAutoTenant>
            <attr name="entityNode"/>

            <source>
                <c:script><![CDATA[
                    return entityNode.attrCsvSet('tagSet')?.contains('no-tenant')
             ]]></c:script>
            </source>
        </NotAutoTenant>

        <GenModelFromExcel outputMode="node">
            <attr name="path" stdDomain="v-path"/>
            <attr name="markDelta" stdDomain="boolean" optional="true"/>
            <attr name="defaultValueAsNull" stdDomain="boolean" optional="true"/>

            <source>
                <c:script><![CDATA[
                    import io.nop.xlang.xdsl.DslModelHelper;
                    import io.nop.core.resource.component.ResourceComponentManager;

                    const ormModel =  ResourceComponentManager.instance().loadComponentModel(path);
                    const ormNode = DslModelHelper.dslModelToXNode('/nop/schema/orm/orm.xdef',ormModel, defaultValueAsNull ?? true);

                    ormNode.removeAttr('ext:extends');
                    ormNode.setAttr('xmlns:i18n-en','i18n-en');
                    ormNode.setAttr('xmlns:ref-i18n-en','ref-i18n-en');
                    ormNode.setAttr('xmlns:ext','ext');
                    ormNode.setAttr('xmlns:orm-gen','orm-gen');
                    ormNode.setAttr('xmlns:xpl','xpl');
                    ormNode.setAttr('xmlns:ui','ui');
                    ormNode.prependBodyXml(`<x:post-extends x:override="replace"><orm-gen:DefaultPostExtends xpl:lib="/nop/orm/xlib/orm-gen.xlib" /></x:post-extends>`);

                    if(markDelta){
                        ormNode.makeChild("entities").forEachChild(child=>child.addTagSet('delta'));
                    }
                    $out.appendChild(ormNode);
                ]]></c:script>
            </source>
        </GenModelFromExcel>
    </tags>
</lib>