<task x:schema="/nop/schema/task/task.xdef" xmlns:x="/nop/schema/xdsl.xdef"
      x:extends="/nop/task/lib/common.task.xml,/nop/task/lib/batch-common.task.xml"
      xmlns:c="c" xmlns:dao="dao">

    <input name="request" type="Map"/>

    <x:config>
        <c:import from="/nop/orm/xlib/dao.xlib"/>
    </x:config>

    <steps>
        <step name="createCustomer" useParentScope="true">
            <source>
                <c:var name="customerNumber" value="${'C' + $String.randomDigits(19)}"/>
                <dao:SaveEntity entityName="DemoCustomer" data="${{
                    firstName: request.customer.firstName,
                    lastName: request.customer.familyName,
                    gender: request.customer.gender,
                    customerNumber,
                    idCard: request.customer.idCard,
                    partitionIndex: customerNumber.$shortHash()
                }}"/>
            </source>

            <output name="RESULT" exportAs="customer" />
        </step>

        <step name="createAccount" useParentScope="true">
            <source>
                <dao:SaveEntity entityName="DemoAccount" data="${{
                    customerId: customer.id,
                    partitionIndex: customer.partitionIndex,
                    accountNumber: 'A'+$String.randomDigits(19),
                    accountType: 'A',
                    balance: 0,
                    cycleDay: request.cycleDay!,
                    dueDate: $Date.currentDate().plusMonths(1),
                    status: 1
                }}"/>
            </source>

            <output name="RESULT" exportAs="account" />
        </step>

        <step name="createCard" customType="dao:SaveEntity"
                dao:entityName="DemoCard" xmlns:dao="/nop/orm/xlib/dao.xlib"
                dao:data="${{
                    customerId: customer.id,
                    accountId: account.id,
                    cardNumber: 'D' + $String.randomDigits(16),
                    cardType: request.cardType,
                    cardStyle: request.cardStyle!,
                    authLimit: request.creditLimit.totalLimit,
                    cashLimit: request.creditLimit.cashLimit,
                    usedCredit: 0,
                    mainCardId: request.mainCardId,
                    partitionIndex: customer.partitionIndex
                }}">

            <output name="RESULT" exportAs="card" />
        </step>
    </steps>

    <output name="card" />
</task>