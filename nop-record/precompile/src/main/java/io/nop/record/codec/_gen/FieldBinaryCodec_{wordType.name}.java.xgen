<c:unit xpl:outputMode="text">
package io.nop.record.codec._gen;

import io.nop.record.codec.IFieldBinaryEncoder;
import io.nop.record.codec.IFieldCodecContext;
import io.nop.record.reader.IBinaryDataReader;
import io.nop.record.writer.IBinaryDataWriter;
import io.nop.record.codec.impl.StaticFieldBinaryCodecFactory;
import io.nop.record.serialization.IModelBasedBinaryRecordDeserializer;
import io.nop.record.serialization.IModelBasedBinaryRecordSerializer;

import java.io.IOException;

public class FieldBinaryCodec_${wordType.name} extends StaticFieldBinaryCodecFactory{
    public static final FieldBinaryCodec_${wordType.name} INSTANCE = new FieldBinaryCodec_${wordType.name}();

    @Override
    public Object decode(IBinaryDataReader input, Object record, int length,
                        IFieldCodecContext context, IModelBasedBinaryRecordDeserializer deserializer ) throws IOException{
        return input.read${wordType.name.$capitalize()}();
    }

    @Override
    public void encode(IBinaryDataWriter output, Object value, int length,
        IFieldCodecContext context, IModelBasedBinaryRecordSerializer serializer) throws IOException{
        if(value == null){
            output.write${wordType.name.$capitalize()}(${wordType.obj.defaultValueInitializer});
        }else{
            <c:iif test="${wordType.obj.longValue}">
                <c:unit>
                    output.write${wordType.name.$capitalize()}(((Number)value).longValue());
                </c:unit>
                <c:unit>
                    output.write${wordType.name.$capitalize()}((${wordType.obj.valueTypeName})value);
                </c:unit>
            </c:iif>

        }
    }
}
</c:unit>