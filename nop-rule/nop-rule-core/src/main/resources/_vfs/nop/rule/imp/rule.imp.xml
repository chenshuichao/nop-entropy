<?xml version="1.0" encoding="UTF-8" ?>

<imp x:schema="/nop/schema/excel/imp.xdef" xmlns:x="/nop/schema/xdsl.xdef" defaultStripText="true" xmlns:xpt="xpt"
     xdef="/nop/schema/rule.xdef" resultType="io.nop.rule.core.model.RuleModel">

    <afterParse>
        import io.nop.rule.core.excel.RuleTableModelParser;

        const sheet = workbook.getSheet('Rule');
        if(sheet != null)
        new RuleTableModelParser().parseRuleTable(rootModel, sheet);
    </afterParse>

    <sheets>
        <sheet name="Config">
            <fields>
                <field name="x:extends" displayName="继承文件">
                    <schema stdDomain="string"/>
                </field>

                <field name="x:dump" displayName="输出调试">
                    <schema stdDomain="boolean"/>
                </field>

                <field name="name" displayName="名称">
                    <schema stdDomain="string"/>
                </field>

                <field name="displayName" displayName="中文名">
                    <schema stdDomain="string"/>
                </field>

                <field name="i18n-en:displayName" displayName="英文名">
                    <schema stdDomain="string"/>
                </field>

                <field name="description" displayName="描述">
                    <schema stdDomain="string"/>
                </field>

                <field name="tagSet" displayName="标签">
                    <schema stdDomain="word-set"/>
                </field>

                <field name="beforeExecute" displayName="执行前">
                    <schema stdDomain="xpl"/>
                </field>

                <field name="afterExecute" displayName="执行后">
                    <schema stdDomain="xpl"/>
                </field>

                <field name="extConfig" virtual="true" displayName="扩展配置">
                    <schema stdDomain="json"/>
                </field>

                <field name="decisionTree.multiMatch" displayName="匹配多分支" ignoreWhenEmpty="true">
                    <schema stdDomain="boolean"/>
                </field>

                <field name="decisionMatrix.rowDecider.multiMatch" displayName="匹配多行" ignoreWhenEmpty="true">
                    <schema stdDomain="boolean"/>
                </field>

                <field name="decisionMatrix.colDecider.multiMatch" displayName="匹配多列" ignoreWhenEmpty="true">
                    <schema stdDomain="boolean"/>
                </field>

                <field name="inputs" displayName="输入变量" list="true">
                    <fields>
                        <field name="mandatory" displayName="非空" xpt:formatExpr="cell.value ? 'M': ''">
                            <schema stdDomain="boolean"/>
                            <valueExpr>
                                value == 'M' || value == 'Y'
                            </valueExpr>
                        </field>

                        <field name="computed" displayName="计算">
                            <schema stdDomain="boolean"/>
                            <valueExpr>
                                value == 'Y'
                            </valueExpr>
                        </field>

                        <field name="name" displayName="名称" mandatory="true">
                            <schema stdDomain="var-name"/>
                            <valueExpr><![CDATA[
                               // 通过*作为前缀表示存在多少个层级
                               const str = value.$chompStartChars("*");
                               record['ext:level'] = value.length() - str.length();
                               return str.trim()
                         ]]></valueExpr>
                        </field>

                        <field name="ext:level" displayName="树形结构层次" mandatory="true">
                            <schema stdDomain="int"/>
                        </field>

                        <field name="ui:show" displayName="显示">
                            <schema stdDomain="string"/>
                        </field>

                        <field name="displayName" displayName="中文名"/>

                        <field name="i18n-en:displayName" displayName="英文名"/>

                        <field name="type" displayName="类型">
                            <schema stdDomain="generic-type"/>
                        </field>

                        <field name="schema.stdDomain" displayName="标准数据域">
                            <schema stdDomain="xml-name"/>
                        </field>

                        <field name="schema.domain" displayName="数据域">
                            <schema stdDomain="xml-name"/>
                        </field>

                        <field name="schema.precision" displayName="长度">
                            <schema stdDomain="int-size"/>
                        </field>

                        <field name="schema.scale" displayName="小数位数">
                            <schema stdDomain="int-size"/>
                        </field>

                        <field name="schema.dict" displayName="字典">
                            <schema stdDomain="string"/>
                        </field>

                        <field name="tagSet" displayName="标签">
                            <schema stdDomain="csv-set"/>
                        </field>

                        <field name="description" displayName="描述">
                            <schema stdDomain="string"/>
                        </field>

                        <field name="defaultExpr" displayName="缺省值表达式">
                            <schema stdDomain="xpl"/>
                        </field>

                        <field name="extConfig" virtual="true" displayName="扩展配置">
                            <schema stdDomain="json"/>
                        </field>
                    </fields>
                </field>

                <field name="outputs" displayName="输出变量" x:prototype="inputs">
                    <fields>
                        <field name="computed" x:prototype-override="remove"/>
                        <field name="aggregate" displayName="汇总">
                            <schema dict="io.nop.rule.core.model.RuleAggregateMethod"/>
                        </field>
                    </fields>
                </field>

            </fields>

            <normalizeFieldsExpr><![CDATA[
               import io.nop.excel.imp.util.ImportDataHelper;
               ImportDataHelper.normalizeTree(record.inputs, "schema.props","ext:level","name");
               record.inputs = _.toKeyedList(record.inputs,'name');
         ]]></normalizeFieldsExpr>
        </sheet>

        <sheet name="Rule" ignore="true">
            <fields>
                <field name="input" displayName="输入"/>
                <field name="output" displayName="输出"/>
                <field name="description" displayName="描述"/>
            </fields>
        </sheet>

        <sheet name="RuleList" field="decisionTree.children" list="true">
            <normalizeFieldsExpr><![CDATA[
                import io.nop.rule.core.excel.RuleModelHelper;

                record.predicate = RuleModelHelper.transformToFilter(record.predicate);
                if(record['ext:result'] != null){
                    record.outputs = record.outputs || [];
                    record.outputs.push({ name: 'RESULT', value: record['ext:result'] });
                }
            ]]></normalizeFieldsExpr>

            <fields>
                <field name="id" displayName="ID" mandatory="true"/>

                <field name="label" displayName="显示名">
                    <schema stdDomain="string"/>
                </field>

                <field name="description" displayName="描述">
                    <schema stdDomain="string"/>
                </field>

                <field name="ext:result" displayName="返回值" stripText="true">
                    <schema stdDomain="string"/>
                </field>

                <field name="predicate" displayName="判断条件" list="true">
                    <fields>
                        <field name="level" displayName="层级" mandatory="true">
                            <schema stdDomain="int"/>
                        </field>

                        <field name="logic" displayName="逻辑关系">
                            <schema dict="core/logic-operator"/>
                        </field>

                        <field name="name" displayName="字段"/>

                        <field name="op" displayName="操作符">
                            <schema dict="core/filter-op"/>
                        </field>

                        <field name="value" displayName="值"/>

                        <field name="valueName" displayName="值字段"/>

                        <field name="label" displayName="显示名">
                            <schema stdDomain="string"/>
                        </field>
                    </fields>
                </field>

                <field name="children" displayName="子规则列表" noSeqCol="true">
                    <normalizeFieldsExpr><![CDATA[
                        import io.nop.rule.core.excel.RuleModelHelper;
                        record.predicate = RuleModelHelper.transformToFilter(record.predicate);
                        if(record['ext:result'] != null){
                            record.outputs = record.outputs || [];
                            record.outputs.push({ name: 'RESULT', value: record['ext:result'] });
                        }
                    ]]></normalizeFieldsExpr>

                    <fields>
                        <field name="id" displayName="ID" mandatory="true"/>

                        <field name="ext:result" displayName="返回值" stripText="true">
                            <schema stdDomain="string"/>
                        </field>

                        <field name="predicate" displayName="判断条件" list="true" mandatory="true">
                            <fields>
                                <field name="level" displayName="层级" mandatory="true">
                                    <schema stdDomain="int"/>
                                </field>

                                <field name="logic" displayName="逻辑关系">
                                    <schema dict="core/logic-operator"/>
                                </field>

                                <field name="name" displayName="字段"/>

                                <field name="op" displayName="操作符">
                                    <schema dict="core/filter-op"/>
                                </field>

                                <field name="value" displayName="值"/>

                                <field name="valueName" displayName="值字段"/>
                            </fields>
                        </field>

                        <field name="outputs" displayName="输出" list="true" noSeqCol="true">
                            <fields>
                                <field name="name" displayName="名称" mandatory="true"/>
                                <field name="valueExpr" displayName="值表达式">
                                    <schema stdDomain="xpl"/>
                                </field>
                                <field name="value" displayName="值"/>
                            </fields>
                        </field>
                    </fields>
                </field>

                <field name="outputs" displayName="输出" list="true" noSeqCol="true">
                    <fields>
                        <field name="name" displayName="名称" mandatory="true"/>
                        <field name="valueExpr" displayName="值表达式">
                            <schema stdDomain="xpl"/>
                        </field>
                        <field name="value" displayName="值"/>
                    </fields>
                </field>
            </fields>
        </sheet>
    </sheets>
</imp>