<task x:schema="/nop/schema/task/task.xdef" xmlns:x="/nop/schema/xdsl.xdef" xmlns:task="task"
      xmlns:ai="/nop/ai/xlib/ai.xlib" xmlns:ai-coder="/nop/ai/xlib/ai-coder.xlib" x:dump="true"
      xmlns:file-utils="/nop/task/xlib/file-utils.xlib"
      x:extends="/nop/task/lib/common.task.xml">

    <ai:chatOptions provider="${aiProvider}" model="${aiModel}" contextLength="8192" maxTokens="50000" temperature="0"
                    sessionId="${sessionId}"/>

    <task:namespace ai-coder:enabled="true" file-utils:enabled="true"/>

    <input name="docxPath" type="String" mandatory="true"/>
    <input name="outputDir" type="String" mandatory="true"/>

    <input name="aiProvider" type="String" mandatory="true"/>
    <input name="aiModel" type="String" mandatory="true"/>
    <input name="sessionId" type="String" optional="true"/>

    <steps>
        <step name="initVar">
            <output name="imageDir">
                return outputDir.$appendPath(docxPath.$fileNameNoExt()+"/media")
            </output>
        </step>

        <step name="convertToMarkdown">
            <source><![CDATA[
                import io.nop.ooxml.markdown.DocxToMarkdownConverter;
                import io.nop.core.resource.ResourceHelper;

                const resource = ResourceHelper.resolveRelativePathResource(docxPath);

                const markdown = new DocxToMarkdownConverter().imagesDir(imageDir).convertFromResource(resource);
                return markdown;
            ]]></source>

            <output name="RESULT" exportAs="markdown"/>
            <output name="markdownText" value="${RESULT.toText()}"/>
        </step>

        <fork name="analyzeImages" varName="imagePos">
            <producer><![CDATA[
                import io.nop.markdown.utils.MarkdownHelper;

                return MarkdownHelper.findImagePositions(markdownText);
            ]]></producer>

            <steps>
                <step name="getImageData">
                    <source><![CDATA[
                        import io.nop.markdown.utils.MarkdownHelper;
                        import io.nop.image.utils.ImageCompressHelper;
                        import io.nop.ai.core.api.messages.AiMessageAttachment;

                        const url = MarkdownHelper.getImageUrl(markdownText, imagePos);
                        const imageRes = ResourceHelper.resolveRelativePathResource(imageDir.$appendPath(url.$fullFileName()));
                        const imageData = ImageCompressHelper.compressImageWithLimit(imageRes, 1024*100);
                        return AiMessageAttachment.fromBinaryData(imageData);
                    ]]></source>
                    <output name="RESULT" exportAs="imageData"/>
                </step>

                <step name="aiAnalyze" ai:promptName="coder/analyze-image" ai:attachments="${[imageData]}">
                    <output name="RESULT"/>
                </step>

                <step name="prepareResult">
                    <output name="RESULT"/>
                    <output name="imagePos" value="${imagePos}"/>
                </step>
            </steps>

            <aggregator><![CDATA[

            ]]></aggregator>
        </fork>

    </steps>
</task>