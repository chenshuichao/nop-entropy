<task x:schema="/nop/schema/task/task.xdef" xmlns:x="/nop/schema/xdsl.xdef" xmlns:task="task"
      xmlns:ai="/nop/ai/xlib/ai.xlib" xmlns:ai-coder="/nop/ai/xlib/ai-coder.xlib" x:dump="true"
      xmlns:file-utils="/nop/task/xlib/file-utils.xlib" xmlns:c="c"
      x:extends="/nop/task/lib/common.task.xml">

    <!--    <ai:chatOptions provider="ollama" model="qwen3:8b" contextLength="8192" maxTokens="16000"/>-->

    <!--    <ai:chatOptions provider="deepseek" model="deepseek-chat" contextLength="8192" maxTokens="8192"/>-->

    <!--    <ai:chatOptions provider="volcengine" model="deepseek-chat" contextLength="8192" maxTokens="8192" temperature="0" />-->

    <ai:chatOptions provider="${aiProvider}" model="${aiModel}" contextLength="8192" maxTokens="50000" temperature="0"
                    sessionId="${sessionId}"/>

    <task:namespace ai-coder:enabled="true" file-utils:enabled="true"/>

    <input name="requirementsPath" type="String" mandatory="true"/>
    <input name="appName" type="String" mandatory="true"/>
    <input name="basePackageName" type="String" mandatory="true"/>
    <input name="outputDir" type="String" mandatory="true"/>

    <input name="aiProvider" type="String" mandatory="true"/>
    <input name="aiModel" type="String" mandatory="true"/>
    <input name="sessionId" type="String" optional="true"/>

    <steps>
        <step name="loadRequirements" customType="ai-coder:LoadMarkdown">
            <input name="fileName" value="${requirementsPath}"/>
            <input name="tplPath" value="/nop/ai/schema/coder/requirements.tpl.md"/>

            <input name="loadDocumentExt" value="true"/>
            <input name="sectionExtTplPath" value="/nop/ai/schema/coder/module-requirements.tpl.md"/>

            <output name="RESULT" exportAs="requirementsDoc"/>
        </step>

        <step name="splitRequirements">
            <input name="requirementsDoc"/>
            <output name="apiRequirements">
                <source>
                    return requirementsDoc.selectSectionByTplTag('API').toText();
                </source>
            </output>
        </step>

        <step name="loadOrmModel" customType="ai-coder:LoadOrmModel">
            <input name="fileName" value="model/ai-gen.orm.xml"/>
            <input name="inputDir" value="${outputDir}"/>
            <output name="RESULT" exportAs="ormModel"/>
        </step>

        <step name="designApi" customType="ai:TaskStep" ai:promptName="coder/api-design" ai:useResponseCache="true">
            <description>根据需求文档的描述，设计API模型</description>

            <input name="requirements" value="${apiRequirements}"/>
            <input name="ormModel"/>
            <output name="RESULT" exportAs="apiNode"/>
        </step>

        <sequential name="adjustOrmModel">
            <when>apiNode.childByTag('orm:delta')?.hasChild()</when>
            <steps>
                <step name="mergeOrmDelta">
                    <source>
                        <c:script>
                            const ormDelta = apiNode.removeChildByTag('orm:delta');
                            ormModel.mergeOrmDelta(ormDelta);
                        </c:script>
                    </source>
                </step>

                <call-step name="saveOrmModel" libModelPath="ai-coder.task-lib.xml" stepName="saveOrmModel">
                    <input name="ormModel"/>
                    <input name="appName"/>
                    <input name="outputDir" />
                </call-step>
            </steps>
        </sequential>

        <step name="checkAiNode" customType="ai:TaskStep" ai:promptName="coder/check-api-model"
              ai:useResponseCache="true">
            <input name="ormModel"/>
            <input name="apiNode"/>

            <output name="RESULT" exportAs="apiNode"/>
        </step>

        <step name="getSimpleApiNode" customType="ai-coder:ExtractDslNode">
            <input name="dslNode" value="${apiNode}"/>
            <input name="xdefPath" value="/nop/ai/schema/coder/simple-api.xdef"/>
            <output name="RESULT" exportAs="simpleApiNode"/>
        </step>

        <step name="checkSimpleApiNode" customType="ai:TaskStep" ai:promptName="coder/check-simple-api-model"
              ai:useResponseCache="true">
            <input name="apiNode" value="${simpleApiNode}"/>
            <input name="requirements" value="${apiRequirements}"/>
            <output name="RESULT" exportAs="simpleApiNode"/>
        </step>

        <step name="mergeApiNode" customType="ai-coder:MergeDslNode">
            <when>simpleApiNode != null</when>
            <input name="xdefPath" value="/nop/ai/schema/coder/api.xdef"/>
            <input name="dslNodeA" value="${apiNode}"/>
            <input name="dslNodeB" value="${simpleApiNode}"/>
            <output name="RESULT" exportAs="apiNode"/>
        </step>

        <step name="normalizeApi">
            <input name="apiNode"/>
            <source><![CDATA[
               apiNode.childByTag('services').forEachChild(node=>{
                   node.setAttr('className', basePackageName + '.api.' + node.attrText('name'));
               });

               apiNode.childByTag('messages').forEachChild(node=>{
                   node.childrenByTag('field').forEach(field=>{
                       field.setAttr('propId', field.childIndex());
                   })
               });
            ]]></source>
        </step>

        <step name="parseDslNode" customType="ai-coder:ParseDslNode">
            <input name="xdefPath" value="/nop/schema/api.xdef"/>
            <input name="dslNode" value="${apiNode}"/>
            <output name="RESULT" exportAs="apiModel"/>
        </step>

        <step name="saveApiXml" customType="ai-coder:SaveDslNode">
            <input name="outputDir"/>
            <input name="fileName" value="model/ai-gen.api.xml"/>
            <input name="dslNode" value="${apiNode}"/>
            <input name="xdefPath" value="/nop/schema/api.xdef"/>
        </step>

        <step name="saveApiExcel" customType="ai-coder:SaveDslModelAsExcel">
            <input name="outputDir"/>
            <input name="fileName" value="model/${appName}.api.xlsx"/>
            <input name="dslModel" value="${apiModel}"/>
            <input name="impModelPath" value="/nop/rpc/imp/api.imp.xml"/>
        </step>
    </steps>
</task>