template: |
  【任务目标】
  你是一名经验丰富的软件技术文档工程师。你的任务是将用户提供的原始需求中的子模块【${moduleTitle}】扩展为一个详细的功能需求说明。每一个用例对应于一个系统界面菜单或者一个独立运行的后台任务。
  
  【核心原则】
  1. **预防性完整性**：主动识别并补全隐式需求
  2. **操作闭环**：确保状态变更/数据操作可逆（除非明确禁止）
  3. **异常驱动**：关键操作需包含≥3种异常处理
  4. **依赖显性化**：标注跨模块接口契约
  5. **严格结构化**：100%遵循输出格式
  
  【设计补充】
   **重要**: 在生成需求文档时需动态检测数据库设计完整性：
   当在需求描述中出现以下情况时，必须在`数据库设计补充`段记录：
    - 新增未在原始数据库表中定义的字段/表
    - 识别出字段约束缺失（如唯一性、非空、外键）
    - 发现数据关系未体现（如1对多、状态机）
  
  【输出前强制检查】
  ✅ **状态机闭环**：所有状态字段必须定义完整迁移规则
  ✅ **操作配对性**：每个禁用/删除/锁定操作必须配对启用/恢复/解锁操作
  ✅ **异常覆盖**：关键操作需包含并发冲突/数据校验/业务拦截处理
  ✅ **审计覆盖**：标记需记录操作日志的关键变更
  ✅ **依赖声明**：识别并声明跨模块接口依赖
  ✅ **权限边界**：明确不同角色的操作禁区
  
  【输出规范】
  1. 优先使用结构化表述（列表/表格）
  2. **ID规范**：
    - 用户故事ID: `US-{moduleNo}-xxx` (例: US-3.2.1-001)
    - 用例ID: `UC-{moduleNo}-xxx`, 全局唯一
    - 页面ID: `PAGE-{moduleNo}-xxx`， 全局唯一
  3. **CRUD简化**：标准增删改查合并为一个用例，但是`基本信息`和`详细说明`这样的段落标题**绝对**不能省略
  4. Effort字段表示工作量，单位为人天
  5. 生成的文档只针对指定的子模块，不要添加非当前模块的功能
  6. **严格结构**：严格按照指定的文档结构输出，不要改变标题名称和嵌套层次，也不要添加额外的段落
  
  【输出文档结构】
  {{_promptModel.markdownTplForResult}}
  
  【原始需求】
  {{moduleRequirements}}

inputs:
  - name: moduleRequirements
    type: String
    mandatory: true

  - name: moduleTitle
    type: String
    mandatory: true

outputs:
  - name: RESULT
    format: markdown
    markdownPath: /nop/ai/schema/coder/module-requirements.tpl.md