<task x:schema="/nop/schema/task/task.xdef" xmlns:x="/nop/schema/xdsl.xdef"
      xmlns:ai="/nop/ai/xlib/ai.xlib" xmlns:ai-coder="/nop/ai/xlib/ai-coder.xlib"
      xmlns:file-utils="/nop/task/xlib/file-utils.xlib" xmlns:task="/nop/task/xlib/task.xlib"
      x:dump="true" x:extends="/nop/task/lib/common.task.xml">

    <!--    <ai:chatOptions provider="ollama" model="qwen3:8b" contextLength="8192" maxTokens="16000"/>-->

    <!--    <ai:chatOptions provider="deepseek" model="deepseek-chat" contextLength="8192" maxTokens="8192"/>-->
    <!--    <ai:chatOptions provider="volcengine" model="deepseek-chat" contextLength="8192" maxTokens="8192" temperature="0" />-->

    <ai:chatOptions provider="${aiProvider}" model="${aiModel}" contextLength="8192" maxTokens="50000"
                    temperature="0" sessionId="${sessionId}" workMode="${workMode}"/>

    <task:namespace ai-coder:enabled="true" file-utils:enabled="true"/>

    <input name="inputRequirementsPath" type="String" mandatory="true"/>
    <input name="basePackageName" type="String" mandatory="true"/>
    <input name="outputDir" type="String" mandatory="true"/>
    <input name="needExpand" type="Boolean" optional="true"/>
    <input name="sessionId" type="String" optional="true"/>
    <input name="workMode" type="string" optional="true"/>

    <steps>
        <step name="loadRequirements" customType="file-utils:ReadText">
            <input name="fileName" value="${inputRequirementsPath}"/>
            <output name="RESULT" exportAs="inputRequirements"/>
        </step>

        <step name="refactorRequirements" customType="ai:TaskStep" ai:promptName="coder/refactor-requirements"
              ai:useResponseCache="true">
            <description>重构需求文档，按照标准格式输出</description>

            <input name="inputRequirements"/>
            <input name="needExpand"/>
            <output name="RESULT" exportAs="requirementsDoc"/>

        </step>

        <step name="removeExtSection">
            <source>
                requirementsDoc.removeSectionBySectionNo('8');
                requirementsDoc.removeSectionBySectionNo('1');
            </source>
        </step>

        <step name="dbDetailDesign" customType="ai:TaskStep" ai:promptName="coder/db-detail-design"
              ai:useResponseCache="true">
            <description>先进行初步的数据库设计</description>
            <input name="requirements" value="${requirementsDoc.toText()}"/>
            <output name="RESULT" exportAs="dbDetailDesignDoc"/>
        </step>

        <step name="mergeDetailDesign">
            <description>将数据库设计合并到需求文档中</description>
            <source>
                const section = dbDetailDesignDoc.findSectionByTitle('数据库详细设计');
                section.removeSectionByTitle('完整性检查'); // 删除无关的部分
                section.removeSectionByTitle('表关联'); // 删除多余的部分，通过字段定义已经包含此信息
                section.resetLevel(1);
                requirementsDoc.addSection(section);
            </source>
        </step>

        <step name="saveRequirements" customType="file-utils:WriteText">
            <input name="outputDir"/>
            <input name="fileName" value="docs/requirements/refactored-requirements.md"/>
            <input name="text" value="${requirementsDoc.toText()}"/>
        </step>

        <fork name="expandModuleRequirements" varName="module">
            <input name="requirementsDoc"/>
            <producer>
                return requirementsDoc.findSectionByTitle('3.2 核心功能模块').children
            </producer>

            <steps>
                <step name="expandOneModuleRequirements" customType="ai:TaskStep"
                      ai:promptName="coder/expand-module-requirements" ai:useResponseCache="true">

                    <!-- 限制调用AI的频度 -->
                    <throttle maxConcurrency="1" maxWait="100000000"/>

                    <input name="moduleRequirements">
                        <source><![CDATA[
                            // 获取核心需求部分以及当前模块的需求
                            return requirementsDoc.selectSection(
                                section=> section.containsTplTag('CORE') or module == section, true).toText()
                        ]]></source>
                    </input>
                    <input name="moduleTitle" value="${module.title}"/>
                    <output name="RESULT" exportAs="moduleDoc"/>
                </step>

                <step name="saveModuleDoc" customType="file-utils:WriteText">
                    <input name="outputDir"/>
                    <input name="fileName" value="docs/requirements/sections/${module.sectionNo}.md"/>
                    <input name="text" value="${moduleDoc.toText()}"/>
                </step>
            </steps>
        </fork>
    </steps>
</task>