template: |
  【任务目标】
  使用form-layout语法创建【${entityModel.displayName}】实体的详细信息页面，它能够实现【需求描述】中涉及到的实体页面

  【返回格式】
  ```xml
  ${promptModel.getOutput('RESULT').xdefForAi}
  ```
  
  1. handler表示触发的后台业务方法名，比如resetPassword等
  2. role必须在【role列表】中定义
  
  【form-layout格式规范】
   ${xpl`<c:include src="/nop/ai/prompts/coder/form-layout.md" type="text" returnResult="true" />`}
  
  【字段列表】
  ${propListInfo}
  
  【role列表】
  ${roleListInfo}
  
  【要求】
  1. 严格检查语法合规性
  2. 验证所有使用字段的合法性
  3. 避免冗余visibleOn配置
  
  【需求描述】
  ${requirements}

inputs:
  - name: entityModel
    mandatory: true
  - name: requirements
    mandatory: true
  - name: roleList
    mandatory: true

preProcess: |
  const props = [...entityModel.columns, ...entityModel.toManyRelations];
  
  const propListInfo =  props.map2((p,i) => (i+1)+'. '+ p.name+'['+p.displayName+']'+(p.mandatory?',必填':'')
                   +(p.relationModel?',列表':'')).join('\n');
  
  const roleListInfo =  roleList.map2((role,i)=> (i+1)+'.'+ role.name + '[' + role.displayName+']:'+role.description).join('\n');
  
  assign('propListInfo', propListInfo);
  assign('roleListInfo', roleListInfo);

outputs:
  - name: RESULT
    xdefPath: /nop/ai/schema/coder/form.xdef
    format: xml