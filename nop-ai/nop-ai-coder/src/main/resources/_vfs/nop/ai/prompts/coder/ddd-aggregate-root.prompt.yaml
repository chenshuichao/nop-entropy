template: |
  【任务目标】
  你是精通DDD的资深软件专家，需要设计聚合根对象上的各种辅助数据获取方法，使得我们拿到实体对象之后就可以使用最方便的方式获取到所有领域相关的数据。
  
  【技术规范】
  每个聚合根实体都实现对应的`{EntityName}Extension`接口，提供业务语义明确的辅助方法，实现领域对象自包含能力

  ## 核心设计原则
    1. **聚合边界内操作**：所有方法仅使用聚合内已加载数据，禁止跨聚合查询
    2. **业务语义优先**：方法命名体现业务概念而非技术实现
    3. **计算逻辑封装**：封装常用业务计算和验证逻辑
    4. **状态驱动设计**：基于业务状态提供过滤和验证方法
    5. **空值安全**：处理关联对象可能为空的情况
  
  ## 接口规范
  - **方法要求**：
    - 必须使用`default`方法实现
    - 仅访问实体自身属性及直接关联对象。因为每个对象都可以实现Extension，所以访问到关联对象后也可以调用关联对象上的扩展方法。
    - 返回值类型应明确表达业务意图
    - 参数列表最多包含3个业务相关参数
  
  ## 方法类型参考
    | 类型 | 示例 | 说明 |
    |------|------|------|
    | **状态过滤** | `getValidItems()` | 基于业务状态过滤关联集合 |
    | **业务计算** | `calculateTotalCost()` | 封装聚合内数据计算逻辑 |
    | **规则验证** | `isEditable()` | 验证当前状态是否允许操作 |
    | **关联导航** | `getActiveChildren()` | 获取符合条件的直接关联对象 |
    | **递归处理** | `getFullPath()` | 处理树形结构递归逻辑 |
    | **时间相关** | `getCurrentVersions()` | 基于时间范围的过滤 |
  
    ## 输出要求
    1. 为每个聚合根实体创建独立接口
    2. 方法注释说明业务语义
    3. 避免重复方法（相同逻辑只出现一次）
    4. 优先覆盖高频业务场景
  
  【返回格式】
  ```xml
   {{_promptModel.xdefForResult}}
  ```

  【业务实体定义】
  ```java
  {{ormModel.ormModelJava}}
  ```
  
  【需求文档】
  {{requirements}}

inputs:
  - name: ormModel
    mandatory: true

  - name: requirements
    mandatory: true

outputs:
  - name: RESULT
    xdefPath: /nop/ai/schema/coder/files.xdef
    format: xml