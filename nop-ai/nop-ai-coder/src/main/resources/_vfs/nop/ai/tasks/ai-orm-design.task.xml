<task x:schema="/nop/schema/task/task.xdef" xmlns:x="/nop/schema/xdsl.xdef" xmlns:task="task"
      xmlns:ai="/nop/ai/xlib/ai.xlib" xmlns:ai-coder="/nop/ai/xlib/ai-coder.xlib" x:dump="true"
      xmlns:file-utils="/nop/task/xlib/file-utils.xlib"
      x:extends="/nop/task/lib/common.task.xml">

    <!--    <ai:chatOptions provider="ollama" model="qwen3:8b" contextLength="8192" maxTokens="16000"/>-->

    <!--    <ai:chatOptions provider="deepseek" model="deepseek-chat" contextLength="8192" maxTokens="8192"/>-->
    <!--    <ai:chatOptions provider="volcengine" model="deepseek-chat" contextLength="8192" maxTokens="8192" temperature="0" />-->

    <ai:chatOptions provider="${aiProvider}" model="${aiModel}" contextLength="8192" maxTokens="8192" temperature="0"
                    sessionId="${sessionId}"/>

    <task:namespace ai-coder:enabled="true" file-utils:enabled="true"/>

    <input name="requirementsPath" type="String" mandatory="true"/>
    <input name="appName" type="String" mandatory="true"/>
    <input name="basePackageName" type="String" mandatory="true"/>
    <input name="outputDir" type="String" mandatory="true"/>
    <input name="aiProvider" type="String" mandatory="true"/>
    <input name="aiModel" type="String" mandatory="true"/>
    <input name="sessionId" type="String" optional="true"/>

    <steps>

        <step name="loadRequirements" customType="ai-coder:LoadMarkdown">
            <input name="fileName" value="${requirementsPath}"/>
            <input name="tplPath" value="/nop/ai/schema/coder/requirements.tpl.md"/>

            <input name="loadDocumentExt" value="true"/>
            <input name="sectionExtTplPath" value="/nop/ai/schema/coder/module-requirements.tpl.md"/>

            <output name="RESULT" exportAs="requirementsDoc"/>
        </step>

        <step name="splitRequirements">
            <description>从需求文档中剪裁得到数据库设计相关的部分</description>
            <input name="requirementsDoc"/>
            <output name="ormRequirements">
                <source>
                    return requirementsDoc.selectSectionByTplTag('ORM',true).toText();
                </source>
            </output>
        </step>

        <step name="designOrm" customType="ai:TaskStep" ai:promptName="coder/orm-design" ai:useResponseCache="true">
            <description>根据需求文档的描述，设计ORM模型</description>

            <input name="requirements" value="${ormRequirements}"/>
            <output name="RESULT" exportAs="ormModel"/>
        </step>

        <step name="checkOrm" customType="ai:TaskStep" ai:promptName="coder/check-orm" ai:useResponseCache="true">
            <input name="requirements" value="${ormRequirements}"/>
            <input name="ormModel"/>
            <output name="RESULT" exportAs="ormDeltaNode"/>
        </step>

        <step name="mergeOrmDelta">
            <source>
                ormModel.mergeOrmDelta(ormDeltaNode);
            </source>
        </step>

        <call-step name="saveOrmModel" libModelPath="ai-coder.task-lib.xml" stepName="saveOrmModel">
            <input name="ormModel"/>
            <input name="appName"/>
            <input name="outputDir"/>
        </call-step>

    </steps>
</task>