<task x:schema="/nop/schema/task/task.xdef" xmlns:x="/nop/schema/xdsl.xdef"
      x:extends="/nop/task/lib/common.task.xml"
      xmlns:ai-coder="/nop/ai/xlib/ai-coder.xlib"
      xmlns:file-utils="/nop/task/xlib/file-utils.xlib" xmlns:task="/nop/task/xlib/task.xlib">

    <task:namespace ai-coder:enabled="true" file-utils:enabled="true"/>

    <steps>
        <sequential name="saveOrmModel">
            <input name="ormModel" mandatory="true"/>
            <input name="appName" mandatory="true"/>
            <input name="outputDir" mandatory="true"/>

            <steps>

                <step name="saveOrmExcel" customType="ai-coder:SaveDslModelAsExcel">
                    <input name="outputDir"/>
                    <input name="fileName" value="model/${appName}.orm.xlsx"/>
                    <input name="dslModel" value="${ormModel.ormModelBean}"/>
                    <input name="impModelPath" value="/nop/orm/imp/orm.imp.xml"/>
                </step>

                <step name="saveOrmXml" customType="file-utils:WriteText">
                    <input name="outputDir"/>
                    <input name="fileName" value="model/ai-gen.orm.xml"/>
                    <input name="text" value="${ormModel.ormModelXmlForAi}"/>
                </step>

                <step name="saveOrmXml2" customType="file-utils:WriteText">
                    <input name="outputDir"/>
                    <input name="fileName"
                           value="${appName}-dao/src/main/resources/_vfs/${appName.replace('-','/')}/orm/ai-gen.orm.xml"/>
                    <input name="text" value="${ormModel.ormModelXml}"/>
                </step>
            </steps>
        </sequential>
    </steps>
</task>